// Generated by CoffeeScript 1.8.0
(function() {
  var classificationAddExtraMessage, classificationRestrainSetHTML, classificationSetExtraMessageContentHTML, classificationSetExtraMessageHTML, classificationSetNameHTML, classificationSetPriorityHTML, decktypeSetExtraMessageHTML, decktypeSetExtraMessageName, decktypeSetTypeName, tagSetExtraMessageHTML, tagSetExtraMessageName, tagSetTypeName;

  this.classificationSetHTML = function(classification) {
    var type;
    classificationSetNameHTML(classification.name);
    classificationSetPriorityHTML(classification.priority);
    classificationRestrainSetHTML(classification.restrain);
    classificationSetExtraMessageHTML(classification);
    type = classification.type;
    if (type === 'deck') {
      return decktypeSetTypeName();
    } else if (type === 'tag') {
      return tagSetTypeName();
    }
  };

  classificationSetNameHTML = function(name) {
    return $("div#deck-name").html(name);
  };

  classificationSetPriorityHTML = function(id) {
    return $("div#deck-prioirity").html(id);
  };

  classificationRestrainSetHTML = function(restrains) {
    var restrain, restrain_gotten_html, _i, _len, _results;
    $("ul#preview-restrains").empty();
    if (!(restrains instanceof Array)) {
      restrains = [restrains];
    }
    _results = [];
    for (_i = 0, _len = restrains.length; _i < _len; _i++) {
      restrain = restrains[_i];
      restrain_gotten_html = this.restrainHTML(restrain);
      $("ul#preview-restrains").append(restrain_gotten_html[0]);
      _results.push($("ul#preview-restrains").append(restrain_gotten_html[1]));
    }
    return _results;
  };

  classificationSetExtraMessageHTML = function(classification) {
    var type;
    type = classification.type;
    if (type === 'deck') {
      decktypeSetExtraMessageName();
      return decktypeSetExtraMessageHTML(classification);
    } else if (type === 'tag') {
      tagSetExtraMessageName();
      return tagSetExtraMessageHTML(classification);
    }
  };

  classificationSetExtraMessageContentHTML = function(messages) {
    var message, _i, _len, _results;
    $("ul#preview-extra-message-list").empty();
    if (messages === null || messages === void 0) {
      return;
    }
    if (!(messages instanceof Array)) {
      messages = [messages];
    }
    _results = [];
    for (_i = 0, _len = messages.length; _i < _len; _i++) {
      message = messages[_i];
      _results.push(classificationAddExtraMessage(message));
    }
    return _results;
  };

  classificationAddExtraMessage = function(message) {
    var a;
    a = $("<a></a>");
    a.addClass("list-group-item");
    if (message.name !== void 0) {
      message = message.name;
    }
    a.html(message);
    return $("ul#preview-extra-message-list").append(a);
  };

  decktypeSetTypeName = function() {
    return $("div#type-name").html("卡组");
  };

  decktypeSetExtraMessageName = function() {
    return $("div#preview-extra-message-name").html("标签");
  };

  decktypeSetExtraMessageHTML = function(decktype) {
    return classificationSetExtraMessageContentHTML(decktype.tags);
  };

  tagSetTypeName = function() {
    return $("div#type-name").html("标签");
  };

  tagSetExtraMessageName = function() {
    return $("div#preview-extra-message-name").html("参数");
  };

  tagSetExtraMessageHTML = function(tag) {
    return classificationSetExtraMessageContentHTML(tag.configs);
  };

}).call(this);

//# sourceMappingURL=classification.js.map
